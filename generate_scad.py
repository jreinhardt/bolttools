# Copyright 2012-2013 Johannes Reinhardt <jreinhardt@ist-dein-freund.de>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Lesser General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Lesser General Public License for more details.
#
# You should have received a copy of the GNU Lesser General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.

from os import listdir,makedirs
from shutil import rmtree,copytree
from blt_parser import load_collection

class OpenSCADExporter:
	def __init__(self,filename):
		self.filename = filename
		self.bases = ["base/conf.scad","base/sketch.scad","base/common.scad"]
		self.tables = []
		self.stubs = []

	def add_collection(self,filename):
		blt = load_collection(filename)
		base = blt['scad']['base-file']
		self.bases += ['base/'+b for b in base]

		parts = blt['parts']
		for part in parts:
			#available arguments and their textual representation
			arguments  = {"standard" : None}

			table_used = 'table' in part.keys() and 'key' in part['target-args']

			#write tables
			if table_used:
				standards = part['standard']
				for standard in standards:
					filename = "tables/%s_table.scad" % standard
					self.write_table('output/scad/' + filename, standard, part['table'],blt['collection'])
					self.tables.append(filename)
				columns = part['table']['columns']
				for col,i in zip(columns,range(len(columns))):
					arguments[col] = 'measures[%d]' % i

			for arg in part['target-args']:
				arguments[arg] = arg
			if 'literal-args' in part.keys():
				for arg,val in part['literal-args'].iteritems():
					arguments[arg] = val

			#write stubs
			base_args = blt['scad']['base-functions'][part['base']]
			for standard in standards:
				arguments["standard"] = '"%s"' % standard
				stub = 'module %s(%s){\n' % (standard, ', '.join(part['target-args']))
	
				if table_used:
					stub += '\tmeasures = %s_table(key);\n' % standard
					stub += '\tif(measures == "Error"){\n'
					stub += '\t\techo("TableLookUpError in %s");\n\t}\n' % standard

				stub += '\tif(BOLTS_MODE == "bom"){\n'

				#write part name output for bom
				argc = 0
				stub += '\t\techo(str(" "'
				for token in part["name"]["template"].split():
					if token[0] == "%":
						stub += ","
						stub += arguments[part["name"]["parameters"][argc]]
						stub += '," "'
						argc += 1
					else:
						stub += ',"%s"' % token
						stub += '," "'
				stub
				stub += "));\n"
				#To avoid problems with missing top level object
				stub += "cube();\n"

				stub += "\t} else {\n"

				#module call
				stub += '\t\t%s(%s);\n\t}\n}\n\n' % (part['base'],',\n\t\t\t'.join(arguments[arg] for arg in base_args))
				self.stubs.append(stub)

	#we do not write modification date or similar stuff to keep vcs diffs clean
	def finish(self):
		fid = open('output/scad/' + self.filename,'w')

		for base in self.bases:
			fid.write('include <%s>\n' % base)
		fid.write("\n")
		for table in self.tables:
			fid.write('include <%s>\n' % table)
		fid.write("\n")
		for stub in self.stubs:
			fid.write(stub)

		fid.close()


	#we do not write modification date or similar stuff to keep vcs diffs clean
	def write_table(self,filename,standard,table,coll):
		fid = open(filename,"w")
		cols = table["columns"]
		fid.write("/* Generated by BOLTS, do not modify */\n")
		fid.write("/* Copyright by: %s */\n" % coll['author'])
		fid.write("/* %s */\n" % coll['license'])

		data = table["data"]
		
		fid.write("function %s_table(key) = \n" % standard)
		for k,v in data.iteritems():
			fid.write('key == "%s" ? %s : \n' % (k,str(list(v)).replace("'",'"')))
		fid.write('"Error";\n')

		fid.close()


#clear output
rmtree("output/scad",True)
makedirs("output/scad/tables")
copytree("scad","output/scad/base")

files = listdir('blt')

exporter = OpenSCADExporter("BOLTS.scad")
for filename in files:
	if filename[-4:] == ".blt":
		print "Processing",filename
		coll = load_collection(filename)
		exporter.add_collection(filename)

exporter.finish()
